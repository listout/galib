Bug: https://bugs.gentoo.org/898276
--- a/examples/ex26.C
+++ b/examples/ex26.C
@@ -188,7 +188,7 @@ Initializer(GAGenome& g) {
 int
 Mutator(GAGenome& g, float pmut) {
   GAListGenome<int> &child=(GAListGenome<int> &)g;
-  register int n, i;
+  int n, i;
   if ((GARandomFloat() >= pmut) || (pmut <= 0)) return 0;
 
   n = child.size();
--- a/examples/gnu/BitString.cc
+++ b/examples/gnu/BitString.cc
@@ -1503,7 +1503,7 @@ void BitString::printon (ostream& os, char f, char t) const
 {
   unsigned int  xl = rep->len;
   const _BS_word* ptr = rep->s;
-  register streambuf *sb = os.rdbuf();
+  streambuf *sb = os.rdbuf();
   _BS_word a = 0;
 
   for (unsigned int  i = 0; i < xl; ++i)
@@ -1557,7 +1557,7 @@ void BitPattern::printon(ostream& s, char f,char t,char x) const
   unsigned int  pl = pattern.rep->len;
   unsigned int  ml = mask.rep->len;
   unsigned int  l = (pl <= ml)? pl : ml;
-  register streambuf *sb = s.rdbuf();
+  streambuf *sb = s.rdbuf();
 
   const _BS_word* ps = pattern.rep->s;
   const _BS_word* ms = mask.rep->s;
--- a/examples/gnu/bitand.c
+++ b/examples/gnu/bitand.c
@@ -31,15 +31,15 @@ the executable file might be covered by the GNU General Public License. */
 void
 /*
 _BS_and (pdst, dstbit, psrc, srcbit, length)
-     register _BS_word* pdst;
+     _BS_word* pdst;
      int dstbit;
-     register const _BS_word* psrc;
+     const _BS_word* psrc;
      int srcbit;
      _BS_size_t length;
 */
-_BS_and (register _BS_word* pdst,
+_BS_and (_BS_word* pdst,
 	 int dstbit,
-	 register const _BS_word* psrc,
+	 const _BS_word* psrc,
 	 int srcbit,
 	 _BS_size_t length)
 {
--- a/examples/gnu/bitany.c
+++ b/examples/gnu/bitany.c
@@ -28,11 +28,11 @@ the executable file might be covered by the GNU General Public License. */
 int
 /*
 _BS_any (ptr, offset, length)
-     register const _BS_word *ptr;
+     const _BS_word *ptr;
      int offset;
      _BS_size_t length;
 */
-_BS_any (register const _BS_word *ptr,
+_BS_any (const _BS_word *ptr,
 	 int offset,
 	 _BS_size_t length)
 {
--- a/examples/gnu/bitblt.c
+++ b/examples/gnu/bitblt.c
@@ -34,16 +34,16 @@ void
 /*
 _BS_blt (op, pdst, dstbit, psrc, srcbit, length)
      enum _BS_alu op;
-     register _BS_word* pdst;
+     _BS_word* pdst;
      int dstbit;
-     register const _BS_word* psrc;
+     const _BS_word* psrc;
      int srcbit;
      _BS_size_t length;
 */
 _BS_blt (enum _BS_alu op,
-	 register _BS_word* pdst,
+	 _BS_word* pdst,
 	 int dstbit,
-	 register const _BS_word* psrc,
+	 const _BS_word* psrc,
 	 int srcbit,
 	 _BS_size_t length)
 {
--- a/examples/gnu/bitclear.c
+++ b/examples/gnu/bitclear.c
@@ -28,11 +28,11 @@ the executable file might be covered by the GNU General Public License. */
 void
 /*
 _BS_clear (ptr, offset, length)
-     register _BS_word *ptr;
+     _BS_word *ptr;
      int offset;
      _BS_size_t length;
 */
-_BS_clear (register _BS_word *ptr,
+_BS_clear (_BS_word *ptr,
 	   int offset,
 	   _BS_size_t length)
 {
--- a/examples/gnu/bitcopy.c
+++ b/examples/gnu/bitcopy.c
@@ -31,15 +31,15 @@ the executable file might be covered by the GNU General Public License. */
 void
 /*
 _BS_copy (pdst, dstbit, psrc, srcbit, length)
-     register _BS_word* pdst;
+     _BS_word* pdst;
      int dstbit;
-     register const _BS_word* psrc;
+     const _BS_word* psrc;
      int srcbit;
      _BS_size_t length;
 */
-_BS_copy (register _BS_word* pdst,
+_BS_copy (_BS_word* pdst,
 	  int dstbit,
-	  register const _BS_word* psrc,
+	  const _BS_word* psrc,
 	  int srcbit,
 	  _BS_size_t length)
 {
--- a/examples/gnu/bitcount.c
+++ b/examples/gnu/bitcount.c
@@ -40,11 +40,11 @@ four_bit_count[16] = {
 static inline int
 /*
 _BS_count_word (word)
-     register _BS_word word;
+     _BS_word word;
 */
-_BS_count_word (register _BS_word word)
+_BS_count_word (_BS_word word)
 {
-  register int count = 0;
+  int count = 0;
   while (word > 0)
     {
       count += four_bit_count[word & 15];
@@ -56,15 +56,15 @@ _BS_count_word (register _BS_word word)
 int
 /*
 _BS_count (ptr, offset, length)
-     register const _BS_word *ptr;
+     const _BS_word *ptr;
      int offset;
      _BS_size_t length;
 */
-_BS_count (register const _BS_word *ptr,
+_BS_count (const _BS_word *ptr,
 	   int offset,
 	   _BS_size_t length)
 {
-  register int count = 0;
+  int count = 0;
 #undef DOIT
 #define DOIT(WORD, MASK) count += _BS_count_word ((WORD) & (MASK));
 #include "bitdo1.h"
--- a/examples/gnu/bitdo1.h
+++ b/examples/gnu/bitdo1.h
@@ -1,8 +1,8 @@
 #ifndef ONES
 #define ONES  ((_BS_word)(~0L))
 #endif
-  register int nwords;
-  register _BS_word mask;
+  int nwords;
+  _BS_word mask;
   if (offset == 0)
     ;
   else if (offset + length >= _BS_BITS_PER_WORD)
--- a/examples/gnu/bitdo2.h
+++ b/examples/gnu/bitdo2.h
@@ -118,7 +118,7 @@
 
       for ( ; length >= _BS_BITS_PER_WORD; length -= _BS_BITS_PER_WORD)
         {
-	  register _BS_word word1 = *psrc++;
+	  _BS_word word1 = *psrc++;
 	  DOIT_SOLID(*pdst,
 		     (word0 _BS_LEFT shift0) | (word1 _BS_RIGHT shift1));
 	  pdst++;
@@ -166,7 +166,7 @@
 
       for ( ; length >= _BS_BITS_PER_WORD; length -= _BS_BITS_PER_WORD)
         {
-	  register _BS_word word1 = *psrc--;
+	  _BS_word word1 = *psrc--;
 	  DOIT_SOLID(*pdst,
 		     (word0 _BS_RIGHT shift1) | (word1 _BS_LEFT shift0));
 	  pdst--;
--- a/examples/gnu/bitinvert.c
+++ b/examples/gnu/bitinvert.c
@@ -28,11 +28,11 @@ the executable file might be covered by the GNU General Public License. */
 void
 /*
 _BS_invert (ptr, offset, length)
-     register _BS_word *ptr;
+     _BS_word *ptr;
      int offset;
      _BS_size_t length;
 */
-_BS_invert (register _BS_word *ptr,int offset,_BS_size_t length)
+_BS_invert (_BS_word *ptr,int offset,_BS_size_t length)
 {
 #undef DOIT
 #define DOIT(WORD, MASK) ((WORD) ^= (MASK))
--- a/examples/gnu/bitlcomp.c
+++ b/examples/gnu/bitlcomp.c
@@ -33,19 +33,19 @@ the executable file might be covered by the GNU General Public License. */
 int
 /*
 _BS_lcompare_0 (ptr0, len0, ptr1, len1)
-     register _BS_word *ptr0;
+     _BS_word *ptr0;
      _BS_size_t len0;
-     register _BS_word *ptr1;
+     _BS_word *ptr1;
      _BS_size_t len1;
 */
-_BS_lcompare_0 (register _BS_word *ptr0,
+_BS_lcompare_0 (_BS_word *ptr0,
 		_BS_size_t len0,
-		register _BS_word *ptr1,
+		_BS_word *ptr1,
 		_BS_size_t len1)
 {
   _BS_size_t nwords0 = len0 / _BS_BITS_PER_WORD;
   _BS_size_t nwords1 = len1 / _BS_BITS_PER_WORD;
-  register _BS_word word0, word1, mask;
+  _BS_word word0, word1, mask;
   _BS_size_t nwords = nwords0 > nwords1 ? nwords1 : nwords0;
   for (; nwords != 0; nwords--)
     {
--- a/examples/gnu/bitset1.c
+++ b/examples/gnu/bitset1.c
@@ -28,11 +28,11 @@ the executable file might be covered by the GNU General Public License. */
 void
 /*
 _BS_set (ptr, offset, length)
-     register _BS_word *ptr;
+     _BS_word *ptr;
      int offset;
      _BS_size_t length;
 */
-_BS_set (register _BS_word *ptr,int offset,_BS_size_t length)
+_BS_set (_BS_word *ptr,int offset,_BS_size_t length)
 {
 #undef DOIT
 #define DOIT(WORD, MASK) ((WORD) |= (MASK))
--- a/examples/gnu/bitstr.C
+++ b/examples/gnu/bitstr.C
@@ -85,7 +85,7 @@ BitStringGenome::UniformInitializer(GAGenome & c) {
 int 
 BitStringGenome::UniformMutator(GAGenome & c, float pmut) {
   BitStringGenome &genome=(BitStringGenome &)c;
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * (float)(genome.length());
--- a/examples/gnu/bitxor.c
+++ b/examples/gnu/bitxor.c
@@ -31,15 +31,15 @@ the executable file might be covered by the GNU General Public License. */
 void
 /*
 _BS_xor (pdst, dstbit, psrc, srcbit, length)
-     register _BS_word* pdst;
+     _BS_word* pdst;
      int dstbit;
-     register const _BS_word* psrc;
+     const _BS_word* psrc;
      int srcbit;
      _BS_size_t length;
 */
-_BS_xor (register _BS_word* pdst,
+_BS_xor (_BS_word* pdst,
 	 int dstbit,
-	 register const _BS_word* psrc,
+	 const _BS_word* psrc,
 	 int srcbit,
 	 _BS_size_t length)
 {
--- a/examples/graphic/tspview.C
+++ b/examples/graphic/tspview.C
@@ -502,7 +502,7 @@ Initializer(GAGenome& g) {
 int
 Mutator(GAGenome& g, float pmut) {
   GAListGenome<int> &child=(GAListGenome<int> &)g;
-  register int n, i;
+  int n, i;
   if ((GARandomFloat() >= pmut) || (pmut <= 0)) return 0;
 
   n = child.size();
--- a/ga/GA1DArrayGenome.C
+++ b/ga/GA1DArrayGenome.C
@@ -380,7 +380,7 @@ GA1DArrayAlleleGenome<ARRAY_TYPE>::FlipMutator(GAGenome & c, float pmut)
 {
   GA1DArrayAlleleGenome<ARRAY_TYPE> &child=
     DYN_CAST(GA1DArrayAlleleGenome<ARRAY_TYPE> &, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float,child.length());
@@ -408,7 +408,7 @@ template <class ARRAY_TYPE> int
 GA1DArrayGenome<ARRAY_TYPE>::SwapMutator(GAGenome & c, float pmut)
 {
   GA1DArrayGenome<ARRAY_TYPE> &child=DYN_CAST(GA1DArrayGenome<ARRAY_TYPE>&, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float,child.length());
--- a/ga/GA1DBinStrGenome.C
+++ b/ga/GA1DBinStrGenome.C
@@ -275,7 +275,7 @@ int
 GA1DBinaryStringGenome::FlipMutator(GAGenome & c, float pmut)
 {
   GA1DBinaryStringGenome &child=DYN_CAST(GA1DBinaryStringGenome &, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float, child.length());
--- a/ga/GA2DArrayGenome.C
+++ b/ga/GA2DArrayGenome.C
@@ -403,7 +403,7 @@ GA2DArrayAlleleGenome<ARRAY_TYPE>::FlipMutator(GAGenome & c, float pmut)
 {
   GA2DArrayAlleleGenome<ARRAY_TYPE> &child=
     DYN_CAST(GA2DArrayAlleleGenome<ARRAY_TYPE> &, c);
-  register int n, m, i, j;
+  int n, m, i, j;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float,child.size());
@@ -434,7 +434,7 @@ template <class ARRAY_TYPE> int
 GA2DArrayGenome<ARRAY_TYPE>::SwapMutator(GAGenome & c, float pmut)
 {
   GA2DArrayGenome<ARRAY_TYPE> &child=DYN_CAST(GA2DArrayGenome<ARRAY_TYPE>&, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float,child.size());
--- a/ga/GA2DBinStrGenome.C
+++ b/ga/GA2DBinStrGenome.C
@@ -377,7 +377,7 @@ int
 GA2DBinaryStringGenome::FlipMutator(GAGenome & c, float pmut)
 {
   GA2DBinaryStringGenome &child=DYN_CAST(GA2DBinaryStringGenome &, c);
-  register int n, m, i, j;
+  int n, m, i, j;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float, child.size());
--- a/ga/GA3DArrayGenome.C
+++ b/ga/GA3DArrayGenome.C
@@ -481,7 +481,7 @@ GA3DArrayAlleleGenome<ARRAY_TYPE>::FlipMutator(GAGenome & c, float pmut)
 {
   GA3DArrayAlleleGenome<ARRAY_TYPE> &child=
     DYN_CAST(GA3DArrayAlleleGenome<ARRAY_TYPE> &, c);
-  register int n, m, d, i, j, k;
+  int n, m, d, i, j, k;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float,child.size());
@@ -516,7 +516,7 @@ template <class ARRAY_TYPE> int
 GA3DArrayGenome<ARRAY_TYPE>::SwapMutator(GAGenome & c, float pmut)
 {
   GA3DArrayGenome<ARRAY_TYPE> &child=DYN_CAST(GA3DArrayGenome<ARRAY_TYPE>&, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float,child.size());
--- a/ga/GA3DBinStrGenome.C
+++ b/ga/GA3DBinStrGenome.C
@@ -493,7 +493,7 @@ int
 GA3DBinaryStringGenome::FlipMutator(GAGenome & c, float pmut)
 {
   GA3DBinaryStringGenome &child=DYN_CAST(GA3DBinaryStringGenome &, c);
-  register int n, m, i, j, k, d;
+  int n, m, i, j, k, d;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * STA_CAST(float,child.size());
--- a/ga/GAListGenome.C
+++ b/ga/GAListGenome.C
@@ -143,7 +143,7 @@ template <class T> int
 GAListGenome<T>::DestructiveMutator(GAGenome & c, float pmut)
 {
   GAListGenome<T> &child=DYN_CAST(GAListGenome<T> &, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return 0;
 
   n = child.size();
@@ -178,7 +178,7 @@ template <class T> int
 GAListGenome<T>::SwapMutator(GAGenome & c, float pmut)
 {
   GAListGenome<T> &child=DYN_CAST(GAListGenome<T> &, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return 0;
 
   n = child.size();
--- a/ga/GARealGenome.C
+++ b/ga/GARealGenome.C
@@ -153,7 +153,7 @@ int
 GARealGaussianMutator(GAGenome& g, float pmut){
   GA1DArrayAlleleGenome<float> &child=
     DYN_CAST(GA1DArrayAlleleGenome<float> &, g);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return(0);
 
   float nMut = pmut * (float)(child.length());
--- a/ga/GATreeGenome.C
+++ b/ga/GATreeGenome.C
@@ -140,7 +140,7 @@ template <class T> int
 GATreeGenome<T>::DestructiveMutator(GAGenome & c, float pmut)
 {
   GATreeGenome<T> &child=DYN_CAST(GATreeGenome<T> &, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return 0;
 
   n = child.size();
@@ -176,7 +176,7 @@ template <class T> int
 GATreeGenome<T>::SwapNodeMutator(GAGenome & c, float pmut)
 {
   GATreeGenome<T> &child=DYN_CAST(GATreeGenome<T> &, c);
-  register int n, i;
+  int n, i;
   if(pmut <= 0.0) return 0;
 
   n = child.size();
@@ -214,7 +214,7 @@ template <class T> int
 GATreeGenome<T>::SwapSubtreeMutator(GAGenome & c, float pmut)
 {
   GATreeGenome<T> &child=DYN_CAST(GATreeGenome<T> &, c);
-  register int n, i;
+  int n, i;
   int a, b;
   if(pmut <= 0.0) return 0;
 
